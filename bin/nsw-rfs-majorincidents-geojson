#!/usr/bin/env node

const fs = require('fs')
const request = require('request')
const argv = require('minimist')(process.argv.slice(2), { boolean: ['pretty-print', 'avoid-geometrycollections', 'avoid-slivers'] })
const NSWRFSMajorIncidentsGeoJSON = require('../src/majorincidents')

if (argv._.length < 1) {
  console.error('Usage: nsw-rfs-majorincidents-geojson <nsw-rfs-majorincidents.geojson>')
  process.exit(1)
}
const upstreamFeedURL = 'https://www.rfs.nsw.gov.au/feeds/majorIncidents.json'

const outputFile = argv._.length === 2 ? argv._[1] : argv._[0]
const inputFile = argv._.length === 2 ? argv._[0] : null

if (inputFile) {
  // process local downloaded file
  processFeed(fs.readFileSync(inputFile === '-' ? '/dev/stdin' : inputFile))
} else {
  // download from upstream
  request(upstreamFeedURL, function (err, res, body) {

    // check for any errors in the HTTP request
    if (err || !res || res.statusCode !== 200) {
      if (err) console.error(err)
      if (res) console.error('Status Code: ' + res.statusCode)
      console.error('Error retrieving feed')
      process.exit(1)
    }

    processFeed(body)
  })
}

function processFeed(feed) {
  // parse the upstream GeoJSON
  var geojson
  try {
    geojson = JSON.parse(feed)
  } catch (Error) {
    console.error('Error parsing JSON feed')
    process.exit(1)
  }

  // clean the GeoJSON feed
  const cleanedGeoJSON = NSWRFSMajorIncidentsGeoJSON.clean(geojson, {
    avoidGeometryCollections: argv['avoid-geometrycollections'],
    avoidSlivers: argv['avoid-slivers'],
    sort: argv['sort'] || 'original'
  })

  const outputString = argv['pretty-print'] ? JSON.stringify(cleanedGeoJSON, null, 2) : JSON.stringify(cleanedGeoJSON)

  // save cleaned GeoJSON to stdout or a file
  if (outputFile === '-') {
    process.stdout.write(outputString)
  } else {
    fs.writeFileSync(outputFile, outputString, 'utf8')
  }
}
